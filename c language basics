//int 整数型，用于定义整数类型的数据.              2byte  存储整数
//float 单精度浮点型，能准确到小数点后六位.        4byte  用于存储小数
//char 为字符型，用于定义字符类型的数据.           1byte  存储单个字符
//double为双精度浮点型，能准确到小数点都十二位.    8byte  用于存储位数更多的小数

//int main()主函数的唯一路口.
//printf()是格式输出函数。
//return是函数的返回值，根据函数类型的不同，返回的值也是不同的。

//%d 带符号的十进制整型数。
//%c 单个字符
//%s 字符串
//%f 6位小数
//#define 标识符 常量值

//1.算数运算符：+，-，*，/，%，++，--

//2.自增自减运算符
//++a先运算，再取值
//a++先取值，再运算

//3.赋值运算符
//简单赋值运算用“=”
//复合赋值运算用“+=”，中间不可以有sapce

//4.关系运算符：<,>,<=,>=,!=,==

//5.逻辑运算符
//&& 逻辑与    0&&1👉0
//|| 逻辑或    0||1👉1
//！ 逻辑非     ！0👉1

//6.三目运算符
//表达式1？表达式2：表达式3
//例如：a>b?a:b

//运算符优先级比较：
//1级   （）
//2级   ！，+（正号），-（负号），++，--
//3级   “*”，“/”，“%”
//4级   +（加），-（减）
//5级   <,<=,>,>=
//6级   ==   ！=
//7级   &&
//8级   ||
//9级   ？：
//10级  =，+=，-=，*=，/=，%=

//·分支结构1
//if（表达式）
//{
//     语句}
//Else if （表达式）
//{      语句}
//Else if （表达式）
//{      语句}
//Else
//{      语句
//}

//分支语句2
//switch（表达式）
//{
//Case 常量表达式；break
//           多余语句
//   …
//Case 常量表达式；break
//            多条语句
//default：
//            多余语句
//}

//循环语句

//1.while循环
//while（表达式）
//{
//执行代码块
//}

//2.do-while循环
//do
//{
//执行代码块
//}while（表达式）；

//3.for循环
//for（表达式1，表达式2，表达式3）
//{
//执行代码块
//}

//for循环的补充！
//表达式1是一个或多个赋值语句，它用来控制变量的初始值；
//表达式2是一个关系表达式，它决定什么时候退出循环；
//表达式3是循环变量的步进值，定义控制循环变量每循环一次后按什么方式变化。
//这三部分之间用分号 ; 分开。
//使用for语句应该注意：
//for循环中的“表达式1、2、3”均可不写为空，但两个分号(;;)不能缺省。
//省略“表达式1（循环变量赋初值）”，表示不对循环变量赋初始值。
//省略“表达式2(循环条件)”，不做其它处理，循环一直执行（死循环）。
//省略“表达式3(循环变量增减量)”，不做其他处理，循环一直执行（死循环）。
//表达式1可以是设置循环变量的初值的赋值表达式，也可以是其他表达式。
//表达式1和表达式3可以是一个简单表达式也可以是多个表达式以逗号分割。
//表达式2一般是关系表达式或逻辑表达式，但也可是数值表达式或字符表达式，只要其值非零，就执行循环体。
//各表达式中的变量一定要在for循环之前定义。
